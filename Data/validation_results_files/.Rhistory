lag_df <- list(k294, k305, k306, wand) %>%
reduce(inner_join, by = "DateTime") # ok this kinda works, gotta work out subsetting and whatnot
add_column(lag_df, kestrel_wbt_mean = rowMeans(lag_df[c(2,4,6)]))
add_column(kestrel_wbt_mean = rowMeans(lag_df[c(2,4,6)]))
lag_df <- list(k294, k305, k306, wand) %>%
reduce(inner_join, by = "DateTime") %>% # ok this kinda works, gotta work out subsetting and whatnot
add_column(kestrel_wbt_mean = rowMeans(lag_df[c(2,4,6)]))
lag_df <- list(k294, k305, k306, wand) %>%
reduce(inner_join, by = "DateTime") %>% # ok this kinda works, gotta work out subsetting and whatnot
add_column(kestrel_wbt_mean = rowMeans(lag_df[c(2,4,6)])) %>%
add_column(kestrel_ta_mean = rowMeans(lag_df[c(3,5,7)]))
lag_df <- list(k294, k305, k306, wand) %>%
reduce(inner_join, by = "DateTime") %>% # ok this kinda works, gotta work out subsetting and whatnot
add_column(kestrel_wbt_mean = rowMeans(lag_df[c(2,4,6)])) %>%
add_column(kestrel_ta_mean = rowMeans(lag_df[c(3,5,7)])) %>%
add_column(wand_mean = rowMeans(lag_df[9:12]))
lag_df <- list(k294, k305, k306, wand) %>%
reduce(inner_join, by = "DateTime") %>% # ok this kinda works, gotta work out subsetting and whatnot
add_column(kestrel_wbt_mean = rowMeans(lag_df[c(2,4,6)])) %>%
add_column(kestrel_ta_mean = rowMeans(lag_df[c(3,5,7)])) %>%
add_column(wand_mean = rowMeans(lag_df[9:12])) %>%
add_column(simul_wbgt = (0.7 * lag_df$kestrel_wbt_mean) + (0.3 * lag_df$kestrel_ta_mean))
lag_df <- select(lag_df, c(1,8,13,15,16))
?melt
lag_df <- melt(lag_df, id.vars = c('DateTime', 'Location'), variable.name = 'unitname')
ggplot(data = lag_df, mapping = aes(DateTime, value)) +
geom_point(aes(color = unitname)) +
xlab("Time") +
ylab("WBGT (°C)")+
theme(legend.position = "none") +
theme_bw() +
theme(panel.grid.major.y = element_line(color = 'gray')) +
scale_color_manual(labels = c("Avg. Extech WBGT", "WBGT from Formula"),
values = c("royalblue", "violetred"),
name = "Unit")
ggplot(data = lag_df, mapping = aes(DateTime, value)) +
geom_point(aes(color = unitname)) +
xlab("Time") +
ylab("WBGT (°C)")+
theme(legend.position = "none") +
theme_bw() +
theme(panel.grid.major.y = element_line(color = 'gray'))
ggplot(data = lag_df, mapping = aes(DateTime, value)) +
geom_point(aes(color = unitname)) +
xlab("Time") +
ylab("WBGT (°C)")+
theme(legend.position = "none") +
theme_bw() +
theme(panel.grid.major.y = element_line(color = 'gray')) +
scale_color_manual(labels = c("Avg. Kestrel WBT", "Avg. Extech WBGT", "WBGT from Formula"),
values = c("green3", "royalblue", "violetred"),
name = "Unit")
ggplot(data = lag_df, mapping = aes(DateTime, value)) +
geom_point(aes(color = unitname)) +
facet_wrap(~Location, scale="free_x") +
xlab("Time") +
ylab("WBGT (°C)")+
theme(legend.position = "none") +
theme_bw() +
theme(panel.grid.major.y = element_line(color = 'gray')) +
scale_color_manual(labels = c("Avg. Kestrel WBT", "Avg. Extech WBGT", "WBGT from Formula"),
values = c("green3", "royalblue", "violetred"),
name = "Unit")
install.packages('devtools')
library(devtools)
install.packages("devtools")
devtools::install_github('nationalparkservice/NSNSDAcoustics')
library(NSNSDAcoustics)
devtools::install_github('nationalparkservice/NSNSDAcoustics')
library(tidyverse)
library(NSNSDAcoustics)
devtools::install_github('nationalparkservice/NSNSDAcoustics')
library(shiny)
install.packages('shiny')
library(shiny)
library(bslib)
install.packages('bslib')
library(bslib)
library(tools, lib.loc = "C:/Program Files/R/R-4.1.3/library")
library(bslib)
install.packages('bslib')
install.packages('bslib')
library(bslib)
install.packages('tidyverse')
library(tidyverse)
install.packages('devtools')
install.packages('shiny')
install.packages('bslib')
library(devtools)
library(tidyverse)
library(shiny)
install.packages('devtools')
install.packages('shiny')
install.packages('bslib')
install.packages('ggExtra')
library(bslib)
library(devtools)
library(ggExtra)
library(ggplot2)
library(tidyverse)
library(shiny)
devtools::install_github('nationalparkservice/NSNSDAcoustics')
?set_github_pat
library(gh)
?set_github_pat
library(gitcreds)
?set_github_pat
edit_git_config()
?gitcreds_set
gitcreds_set()
edit_git_config()
use_git_config(user.name = "aikibraki", user.email = "aidan.kirchgraber@gmail.com")
gitcreds_set()
use_git_config(user.name = "aikibraki", user.email = "aidan.kirchgraber@gmail.com")
use_git_config(user.name = "aikibraki", user.email = "aidan.kirchgraber@gmail.com")
github_token(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)
?`github-token`
gitcreds::gitcreds_set()
git_sitrep()
gitcreds::gitcreds_set()
credentials::set_github_pat()
credentials::git_credential_forget()
devtools::install_github('nationalparkservice/NSNSDAcoustics')
usethis::create_github_token()
gitcreds::gitcreds_set()
gh_token_help(host = NULL)
edit_r_environ()
gitcreds::gitcreds_set()
devtools::install_github('nationalparkservice/NSNSDAcoustics')
devtools::install_github('nationalparkservice/NSNSDAcoustics')
library(bslib)
library(devtools)
library(ggExtra)
library(ggplot2)
library(tidyverse)
library(shiny)
devtools::install_github('nationalparkservice/NSNSDAcoustics')
remove.packages("NSNSDAcoustics")
devtools::install_github('nationalparkservice/NSNSDAcoustics')
edit_git_config()
swirl()
library(swirl)
swirl()
menu()
home()
esc()
swirl()
swirl()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
??group_by()
?group_by
View(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
exit()
menu()
home()
0
s
swirl()
swirl()
library(swirl)
swirl()
plot(child~parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
bye()
swirl()
# Function to generate the nth term of the Look-and-Say sequence
lookAndSay <- function(n) {
if (n == 0) return("0")
# Start with the seed value "1"
term <- "1"
for (i in 2:n) {
newTerm <- ""
curChar <- substring(term, 1, 1)
count <- 1
# Iterate through the current term
for (j in 2:nchar(term)) {
nextChar <- substring(term, j, j)
if (nextChar != curChar) {
# Append the count and character to the new term
newTerm <- paste0(newTerm, count, curChar)
curChar <- nextChar
count <- 1
} else {
count <- count + 1
}
}
# Append the last group
newTerm <- paste0(newTerm, count, curChar)
term <- newTerm
}
return(term)
}
# Example usage
print(lookAndSay(1))  # Output: "11"
print(lookAndSay(4))  # Output: "1211"
print(lookAndSay(10)) # Output: "13211311123113112211"
look_and_say <- function(n) {
if (n == 0) {
return("1")
}
current_term <- "1"
for (i in 1:n) {
new_term <- ""
count <- 1
for (j in 2:nchar(current_term)) {
if (substr(current_term, j, j) == substr(current_term, j - 1, j - 1)) {
count <- count + 1
} else {
new_term <- paste0(new_term, count, substr(current_term, j - 1, j - 1))
count <- 1
}
}
new_term <- paste0(new_term, count, substr(current_term, nchar(current_term), nchar(current_term)))
current_term <- new_term
}
return(current_term)
}
look_and_say(2)
look_and_say <- function(n) {
if (n == 0) {
return("1")
}
current_term <- "1"
for (i in 1:n) {
new_term <- ""
char <- substr(current_term, 1, 1)
count <- 1
for (j in 2:nchar(current_term)) {
if (substr(current_term, j, j) == char) {
count <- count + 1
} else {
new_term <- paste0(new_term, count, char)
char <- substr(current_term, j, j)
count <- 1
}
}
new_term <- paste0(new_term, count, char)
current_term <- new_term
}
return(current_term)
}
look_and_say(2)
look_and_say <- function(n) {
if (n == 0) {
return("1")
}
current_term <- "1"
for (i in 1:n) {
new_term <- ""
char <- substr(current_term, 1, 1)
char_count <- 1
for (j in 2:nchar(current_term)) {
if (substr(current_term, j, j) == char) {
char_count <- char_count + 1
} else {
new_term <- paste0(new_term, char_count, char)
char <- substr(current_term, j, j)
char_count <- 1
}
}
new_term <- paste0(new_term, char_count, char)
current_term <- new_term
}
return(current_term)
}
look_and_say(2)
View(look_and_say)
install.packages("tidyverse")
install.packages("tidyverse")
library(bslib)
library(usethis)
install.packages("bslib")
install.packages("bslib")
library(bslib)
library(usethis)
install.packages("usethis")
library(usethis)
R.version
?R.version
library(bslib)
library(usethis)
library(devtools)
library(ggExtra)
library(ggplot2)
library(tidyverse)
library(shiny)
library(NSNSDAcoustics)
# use this to install NSNSDAcoustics package
devtools::install_github('nationalparkservice/NSNSDAcoustics')
Sys.setenv(GITHUB_PAT = "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")
# use this to install NSNSDAcoustics package
devtools::install_github('nationalparkservice/NSNSDAcoustics')
library(NSNSDAcoustics)
warnings()
library(NSNSDAcoustics)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
quit()
library(tidyverse)
library(bslib)
library(usethis)
library(devtools)
library(ggExtra)
library(ggplot2)
library(shiny)
library(NSNSDAcoustics)
library(tidyverse)
read.csv('C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024(Stillmeadow).csv', header = TRUE)
read.csv('C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024(Stillmeadow).csv')
?read_delim
df = read_csv(file = 'C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024(Stillmeadow).csv')
library(readr)
Aidan_WBGT_data_2024_Stillmeadow_ <- read_csv("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024(Stillmeadow).csv")
wbgt_sheet = read_csv('C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.csv')
wbgt_sheet = read_delim('C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx')
View(wbgt_sheet)
library(readxl)
Aidan_WBGT_data_2024_SM <- read_excel("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx")
View(Aidan_WBGT_data_2024_SM)
wgbt_sheet_sm <- read_excel("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx")
rm(Aidan_WBGT_data_2024_SM)
rm(wbgt_sheet)
View(wgbt_sheet_sm)
View(wgbt_sheet_sm)
wbgt_sheet_sm <- read_excel("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx")
rm(wbgt_sheet_sm)
rm(wgbt_sheet_sm)
wbgt_sheet_sm <- read_excel("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx")
wbgt_sheet_sm$`Time of Recording `
wbgt_sheet_sm$`Time of Recording`
wbgt_sheet_sm$`Time of Recording ` <- hms(wbgt_sheet_sm$`Time of Recording `)
wbgt_sheet_sm$`Time of Recording `
wbgt_sheet_sm$`Time of Recording`
wbgt_sheet_sm <- read_excel("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx")
wbgt_sheet_sm$`Time of Recording `
wbgt_sheet_sm$`Time of Recording`
wbgt_sheet_sm$`Time of Recording `
wbgt_sheet_sm <- read_excel("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx")
View(wbgt_sheet_sm)
wbgt_sheet_sm$`Time of Recording`
wbgt_sheet_sm$Time
wbgt_sheet_sm$Time <- hms::as_hms(wbgt_sheet_sm$Time)
plot(wbgt_sheet_sm$WBGT_F)
plot(wbgt_sheet_sm$WBGT_F, Date)
wbgt_sheet_sm$datetime <- as.POSIXct(paste(wbgt_sheet_sm$Date,
wbgt_sheet_sm$Time),
format = "%Y-%m-%d %H:%M:%S")
rm(wbgt_sheet_sm)
# importing the dataset
wbgt_sm <- read_excel("C:/Users/kirchgrabera/Downloads/Aidan_WBGT_data_2024_SM.xlsx")
# fixing the time column
wbgt_sm$Time <- hms::as_hms(wbgt_sm$Time)
# combining date and time into datetime column
wbgt_sm$datetime <- as.POSIXct(paste(wbgt_sm$Date,
wbgt_sm$Time),
format = "%Y-%m-%d %H:%M:%S")
View(wbgt_sm)
plot(wbgt_sm$WBGT_F, wbgt_sm$datetime)
plot(wbgt_sm$datetime, wbgt_sm$WBGT_F)
ggplot(data = wbgt_sm)
ggplot(data = wbgt_sm, aes(datetime, WBGT_F))
ggplot(data = wbgt_sm, aes(datetime, WBGT_F)) +
geom_line()
ggplot(data = wbgt_sm, aes(datetime, WBGT_F)) +
geom_density(
)
ggplot(data = wbgt_sm, aes(datetime, WBGT_F)) +
geom_jitter()
wbgt_sm$Site <- as.factor(wbgt_sm$Site)
# quick test plot
ggplot(data = wbgt_sm, aes(datetime, WBGT_F, color = Site)) +
geom_jitter()
# quick test plot
ggplot(data = wbgt_sm, aes(datetime, WBGT_F, color = Site)) +
geom_jitter() +
geom_density2d()
# quick test plot
ggplot(data = wbgt_sm, aes(datetime, WBGT_F, color = Site)) +
geom_jitter() +
geom_hex()
# quick test plot
ggplot(data = wbgt_sm, aes(datetime, WBGT_F)) +
geom_jitter() +
geom_hex()
# quick test plot
ggplot(data = wbgt_sm, aes(datetime, WBGT_F)) +
geom_jitter() +
geom_bin2d()
# quick test plot
ggplot(data = wbgt_sm, aes(datetime, WBGT_F)) +
geom_jitter() +
geom_density2d()
# quick test plot
ggplot(data = wbgt_sm, aes(datetime, WBGT_F)) +
geom_jitter()
View(wbgt_sm)
tapply(wbgt_sm$WBGT_F, wbgt_sm$Site, summary)
tapply(wbgt_sm$WBGT_F, wbgt_sm$Site, quantile(wbgt_sm$WBGT_F, probs = 0.95))
?quantile
tapply(wbgt_sm$WBGT_F, wbgt_sm$Site, quantile(probs = 0.95))
tapply(wbgt_sm$WBGT_F, wbgt_sm$Site, function(x) quantile(wbgt_sm$WBGT_F, probs = 0.95))
tapply(wbgt_sm$WBGT_F, wbgt_sm$Site, function(x) quantile(x, probs = 0.95))
tapply(wbgt_sm$WBGT_F, wbgt_sm$Site, describe)
tapply(wbgt_sm$WBGT_F, wbgt_sm$Site, sd)
# Working with validation results -----------------------------------------
setwd("C:/Users/kirchgrabera/Smithsonian Dropbox/Aidan Kirchgraber/Science and Faith/Aidan/audio_analysis/birdnet/validation_results_files")
temp = list.files(pattern = "*.csv")
big_data = lapply(temp, read_delim)
library(tidyverse)
big_data = lapply(temp, read_delim)
View(big_data)
View(big_data[[1]])
lil_data <- map(big_data, ~ filter(.x, !is.na(verify)))
View(lil_data)
View(big_data)
View(lil_data)
View(big_data[[1]])
View(big_data)
View(big_data[[1]])
# Working with validation results -----------------------------------------
setwd("C:/Users/kirchgrabera/Smithsonian Dropbox/Aidan Kirchgraber/Science and Faith/Aidan/audio_analysis/birdnet/validation_results_files")
temp = list.files(pattern = "*.csv")
big_data = lapply(temp, read_delim)
warnings()
problems(big_data)
View(big_data)
View(big_data[[1]])
col_types = cols(
.default = col_guess(),
verify = col_character())
big_data = lapply(temp, function(file) read_delim(file, col_types = col_types))
View(big_data)
lil_data <- map(big_data, ~ filter(.x, !is.na(verify)))
View(lil_data)
View(lil_data[[11]])
??col_types
rm(col_types)
# Get info about true positives by confidence level
results_list <- lapply(lil_data, function(df) {
df %>%
mutate(confidence_bin = cut(confidence, breaks = seq(0, 1, by = 0.01),
labels = paste0(seq(0, 0.99, by = 0.01), "-",
seq(0.01, 1, by = 0.01)),
include.lowest = TRUE)) %>%
group_by(common_name, confidence_bin) %>%
summarize(total_detections = n(),
positive_ids = sum(verify == "y"),
positive_rate = positive_ids / total_detections,
.groups = "keep") %>%
arrange(common_name, confidence_bin) %>%
group_by(common_name) %>%
mutate(cumulative_detections = cumsum(total_detections),
cumulative_positives = cumsum(positive_ids),
cumulative_rate = cumulative_positives / cumulative_detections)%>%
ungroup()
})
View(results_list)
View(results_list[[1]])
# Get the thresholds at which "true pos/total" = 95%
threshold_list <- lapply(results_list, function(df) {
df %>%
group_by(common_name) %>%
summarize(threshold_bin = case_when(
all(positive_rate >= 0.95) ~ "All bins",
all(positive_rate < 0.95) ~ "No bins",
TRUE ~ as.character(confidence_bin[which(positive_rate >= 0.95)[1]])),
total_detections = sum(total_detections),
.groups = "drop")
})
View(threshold_list)
View(threshold_list[[1]])
names(results_list) <- gsub("\\.csv$", "", temp)
# Get the thresholds at which "true pos/total" = 95%
threshold_list <- lapply(results_list, function(df) {
df %>%
group_by(common_name) %>%
summarize(threshold_bin = case_when(
all(positive_rate >= 0.95) ~ "All bins",
all(positive_rate < 0.95) ~ "No bins",
TRUE ~ as.character(confidence_bin[which(positive_rate >= 0.95)[1]])),
total_detections = sum(total_detections),
.groups = "drop")
})
View(threshold_list)
